@page "/add-transaction"
@using ExpenseBuddyJenish.Models
@inject TransactionService TransactionService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Add Transaction</MudText>

    @if (IsTransactionSuccess)
    {
        <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Success" Class="mb-4">Transaction added successfully!</MudText>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error" Class="mb-4">@ErrorMessage</MudText>
    }

    <MudPaper Class="pa-4" Elevation="2">
        <MudForm @ref="Form" OnValidSubmit="SaveTransaction" Model="@ViewModel">
            <MudTextField @bind-Value="ViewModel.Amount" Label="Amount" Required="true" Type="TextFieldType.Number" Class="mb-3" />
            <MudItem xs="12">
                <MudSelect T="string" @bind-Value="ViewModel.Type" Label="Transaction Type" Required="true" Class="mb-4"
                           Style="width: 100%; height: 50px; border-radius: 8px; background-color: #ffffff; font-size: 0.875rem; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                    <MudSelectItem Value="@("credit")" Color="Color.Primary">Credit</MudSelectItem>
                    <MudSelectItem Value="@("debit")" Color="Color.Secondary">Debit</MudSelectItem>
                    <MudSelectItem Value="@("debt")" Color="Color.Secondary">Debt</MudSelectItem>
                    <MudSelectItem Value="@("DebtSettled")" Color="Color.Secondary">Debt Settled</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="ViewModel.Tags" Label="Tags (comma-separated)" Class="mb-4" />
            </MudItem>

            <MudTextField @bind-Value="ViewModel.Remarks" Label="Remarks" Multiline="true" Class="mb-4" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveTransaction" Class="submit-btn w-full">Save</MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm Form;
    private AddTransactionViewModel ViewModel = new();
    private bool IsTransactionSuccess = false;
    private string ErrorMessage = string.Empty;
    private decimal currentBalance = 0;
    private List<string> availableTags = new();


    protected override async Task OnInitializedAsync()
    {
        await GetBalance();
        await LoadAvailableTags();
    }
    private async Task GetBalance()
    {
        var transactions = await TransactionService.GetTransactionsAsync();
        decimal totalInflow = transactions
            .Where(t => t.Type == "credit" && t.Amount.HasValue)
            .Sum(t => t.Amount ?? 0);

        decimal totalOutflow = transactions
            .Where(t => t.Type == "debit" && t.Amount.HasValue)
            .Sum(t => t.Amount ?? 0);

        decimal totalDebt = transactions
           .Where(t => t.Type == "debt" && t.Amount.HasValue)
          .Sum(t => t.Amount ?? 0);

        currentBalance = totalInflow + totalDebt - totalOutflow;
    }

    private async Task LoadAvailableTags()
    {
        var transactions = await TransactionService.GetTransactionsAsync();
        availableTags = transactions
           .Where(t => !string.IsNullOrEmpty(t.Tags))
          .SelectMany(t => t.Tags.Split(','))
           .Select(tag => tag.Trim())
          .Distinct()
          .ToList();
    }

    private async Task SaveTransaction()
    {
        if (Form.IsValid)
        {
            ErrorMessage = string.Empty; 
            if (ViewModel.Type == "debit")
            {
                if (ViewModel.Amount < 0 || currentBalance - ViewModel.Amount < 0)
                {
                    ErrorMessage = "Insufficient balance to add this outflow transaction.";
                    return;
                }
            }

            
            var transaction = ViewModel.ToTransaction();
            if (!string.IsNullOrEmpty(ViewModel.Tags))
            {
                transaction.Tags = ViewModel.Tags;
            }

            await TransactionService.AddTransactionAsync(transaction);

            
            IsTransactionSuccess = true;

            
            Navigation.NavigateTo("/dashboard");
        }
    }
}